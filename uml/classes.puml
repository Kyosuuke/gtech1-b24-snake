@startuml





/' Objects '/

class Apple {
	+Apple(Playground* playground)
	+~Apple()
	-playground : Playground*
	+GetX() : int
	+GetY() : int
	+eat() : int
	-x : int
	-y : int
	+draw(SDL_Renderer* renderer) : void
	+locate() : void
}


class MainSDLWindow {
	+MainSDLWindow()
	+~MainSDLWindow()
	+GetRenderer() : SDL_Renderer*
	-renderer : SDL_Renderer*
	-texture : SDL_Texture*
	-window : SDL_Window*
	+Init(const char* windowName, int width, int height) : int
	+SDL_RenderDrawRects(SDL_Renderer* renderer, const SDL_Rect* rects, int count) : int
	+SDL_SetRenderDrawColor(SDL_Renderer* renderer, Uint8 r, Uint8 g, Uint8 b, Uint8 a) : int
}


class Playground {
	+Playground(int windowWidth, int windowHeight, int squareSize)
	+~Playground()
	+GetNumbOfCol() : int
	+GetNumbOfRow() : int
	+GetSquareSize() : int
	-numbOfCol : int
	-numbOfRow : int
	-squareSize : int
}


class Segment {
	+Segment(int x, int y, Direct direction, Segment* next)
	+~Segment()
	-direction : Direct
	+Getnext() : Segment*
	-next : Segment*
	+GetDirection() : int
	+GetX() : int
	+GetY() : int
	-x : int
	-y : int
	+AddToX(int x) : void
	+AddToY(int y) : void
	+SetDirection(Direct direction) : void
	+SetNext(Segment* next) : void
}


class Snake {
	+Snake(int x, int y, Direct direction, Playground* playground)
	+~Snake()
	-playground : Playground*
	+Gethead() : Segment*
	-head : Segment*
	-tail : Segment*
	+move() : bool
	+eat() : int
	+draw(SDL_Renderer* main_window_renderer) : void
	+grow() : void
	+keyboard() : void
}


enum Direct {
	DOWN
	LEFT
	RIGHT
	UP
}





/' Inheritance relationships '/




/' Aggregation relationships '/

.Apple o-- .Playground


.Segment *-- .Direct


.Segment o-- .Segment


.Snake o-- .Playground


.Snake "2" o-- .Segment






/' Nested objects '/



@enduml

